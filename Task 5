{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kushwanth-reddy/ait-record/blob/main/Task%205\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from numpy import inf\n",
        "\n",
        "# Given distance matrix for cities\n",
        "d = np.array([\n",
        "    [0, 10, 12, 11, 14],\n",
        "    [10, 0, 13, 15, 8],\n",
        "    [12, 13, 0, 9, 14],\n",
        "    [11, 15, 9, 0, 16],\n",
        "    [14, 8, 14, 16, 0]\n",
        "])\n",
        "\n",
        "iteration = 100\n",
        "n_ants = 5\n",
        "n_cities = 5\n",
        "\n",
        "# Initialization parameters\n",
        "m = n_ants\n",
        "n = n_cities\n",
        "e = 0.5  # evaporation rate\n",
        "alpha = 1  # pheromone importance factor\n",
        "beta = 2  # visibility importance factor\n",
        "\n",
        "# Calculating visibility = 1 / distance\n",
        "visibility = 1 / d\n",
        "visibility[visibility == inf] = 0  # handle division by zero\n",
        "\n",
        "# Initialize pheromone levels on paths: size (n x n)\n",
        "pheromone = 0.1 * np.ones((n, n))\n",
        "\n",
        "# Initialize routes of ants: shape (m, n+1) (+1 for returning to start city)\n",
        "route = np.zeros((m, n + 1), dtype=int)\n",
        "\n",
        "for ite in range(iteration):\n",
        "    route[:, 0] = 1  # All ants start at city 1 (indexing from 1 for clarity)\n",
        "\n",
        "    for i in range(m):\n",
        "        visited = [1]  # Start city\n",
        "        for j in range(n - 1):\n",
        "            current_city = route[i, j] - 1  # zero-based index\n",
        "            # Calculate probabilities to next city\n",
        "            prob_numerators = []\n",
        "            for city in range(n):\n",
        "                if (city + 1) not in visited:\n",
        "                    tau = pheromone[current_city, city] ** alpha\n",
        "                    eta = visibility[current_city, city] ** beta\n",
        "                    prob_numerators.append(tau * eta)\n",
        "                else:\n",
        "                    prob_numerators.append(0)\n",
        "            prob_numerators = np.array(prob_numerators)\n",
        "            total = prob_numerators.sum()\n",
        "            if total == 0:\n",
        "                # No available next city (should not happen)\n",
        "                next_city = np.random.choice(list(set(range(1, n+1)) - set(visited)))\n",
        "            else:\n",
        "                probs = prob_numerators / total\n",
        "                next_city = np.random.choice(range(1, n+1), p=probs)\n",
        "\n",
        "            route[i, j + 1] = next_city\n",
        "            visited.append(next_city)\n",
        "\n",
        "        # Close the route by returning to start city\n",
        "        route[i, -1] = 1\n",
        "\n",
        "    # Calculate cost of each ant's tour\n",
        "    dist_cost = np.zeros(m)\n",
        "    for i in range(m):\n",
        "        total_distance = 0\n",
        "        for j in range(n):\n",
        "            c1 = route[i, j] - 1\n",
        "            c2 = route[i, j + 1] - 1\n",
        "            total_distance += d[c1, c2]\n",
        "        dist_cost[i] = total_distance\n",
        "\n",
        "    # Find best route in this iteration\n",
        "    best_index = np.argmin(dist_cost)\n",
        "    best_route = route[best_index]\n",
        "    best_cost = dist_cost[best_index]\n",
        "\n",
        "    # Evaporate pheromone\n",
        "    pheromone = (1 - e) * pheromone\n",
        "\n",
        "    # Update pheromone based on routes\n",
        "    for i in range(m):\n",
        "        for j in range(n):\n",
        "            c1 = route[i, j] - 1\n",
        "            c2 = route[i, j + 1] - 1\n",
        "            pheromone[c1, c2] += 1.0 / dist_cost[i]\n",
        "\n",
        "print('Route of all ants at the end:')\n",
        "print(route)\n",
        "print()\n",
        "print('Best path found:', best_route)\n",
        "print('Cost of the best path:', best_cost)\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xyBZg4h7TVaj",
        "outputId": "2c6fa741-a074-4ca0-84c9-18498dda8b83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Route of all ants at the end:\n",
            "[[1 2 5 3 4 1]\n",
            " [1 2 5 3 4 1]\n",
            " [1 2 5 3 4 1]\n",
            " [1 2 5 3 4 1]\n",
            " [1 2 5 3 4 1]]\n",
            "\n",
            "Best path found: [1 2 5 3 4 1]\n",
            "Cost of the best path: 52.0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-3774886154.py:25: RuntimeWarning: divide by zero encountered in divide\n",
            "  visibility = 1 / d\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}