{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kushwanth-reddy/ait-record/blob/main/Task%203B\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def aStarAlgo(start_node, stop_node):\n",
        "    open_set = set([start_node])\n",
        "    closed_set = set()\n",
        "    g = {}  # store distance from starting node\n",
        "    parents = {}  # parents contain an adjacency map of all nodes\n",
        "\n",
        "    # distance of starting node from itself is zero\n",
        "    g[start_node] = 0\n",
        "\n",
        "    # start_node is the root node, so it has no parent nodes\n",
        "    parents[start_node] = start_node\n",
        "\n",
        "    while len(open_set) > 0:\n",
        "        n = None\n",
        "\n",
        "        # node with the lowest f() = g(n) + heuristic(n) is found\n",
        "        for v in open_set:\n",
        "            if n is None or g[v] + heuristic(v) < g[n] + heuristic(n):\n",
        "                n = v\n",
        "\n",
        "        if n == stop_node or n is None or n not in Graph_nodes:\n",
        "            break\n",
        "\n",
        "        for (m, weight) in get_neighbors(n):\n",
        "            # nodes 'm' not in open_set and closed_set are added to open_set\n",
        "            # n is set as its parent\n",
        "            if m not in open_set and m not in closed_set:\n",
        "                open_set.add(m)\n",
        "                parents[m] = n\n",
        "                g[m] = g[n] + weight\n",
        "            else:\n",
        "                # for each node m, compare its distance from start i.e g(m)\n",
        "                # to the from start through n node\n",
        "                if g[m] > g[n] + weight:\n",
        "                    # update g(m)\n",
        "                    g[m] = g[n] + weight\n",
        "                    # change parent of m to n\n",
        "                    parents[m] = n\n",
        "\n",
        "                    # if m is in closed_set, remove and add to open_set\n",
        "                    if m in closed_set:\n",
        "                        closed_set.remove(m)\n",
        "                        open_set.add(m)\n",
        "\n",
        "        # remove n from the open_set and add it to closed_set\n",
        "        # because all of its neighbors were inspected\n",
        "        open_set.remove(n)\n",
        "        closed_set.add(n)\n",
        "\n",
        "    if n is None:\n",
        "        print('Path does not exist!')\n",
        "        return None\n",
        "\n",
        "    # reconstruct path from stop_node to start_node\n",
        "    path = []\n",
        "    while parents[n] != n:\n",
        "        path.append(n)\n",
        "        n = parents[n]\n",
        "    path.append(start_node)\n",
        "    path.reverse()\n",
        "\n",
        "    print('Path found:', path)\n",
        "    return path\n",
        "\n",
        "def get_neighbors(v):\n",
        "    if v in Graph_nodes:\n",
        "        return Graph_nodes[v]\n",
        "    else:\n",
        "        return []\n",
        "\n",
        "def heuristic(n):\n",
        "    h_dist = {\n",
        "        'A': 11,\n",
        "        'B': 6,\n",
        "        'C': 99,\n",
        "        'D': 1,\n",
        "        'E': 7,\n",
        "        'G': 0\n",
        "    }\n",
        "    return h_dist.get(n, float('inf'))\n",
        "\n",
        "# Define your graph here\n",
        "Graph_nodes = {\n",
        "    'A': [('B', 2), ('E', 3)],\n",
        "    'B': [('A', 2), ('C', 1), ('G', 9)],\n",
        "    'C': [('B', 1)],\n",
        "    'D': [('E', 6), ('G', 1)],\n",
        "    'E': [('A', 3), ('D', 6)],\n",
        "    'G': [('B', 9), ('D', 1)]\n",
        "}\n",
        "\n",
        "print(\"Following is the A* Algorithm:\")\n",
        "aStarAlgo('A', 'G')\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xyBZg4h7TVaj",
        "outputId": "8f417623-3e30-4ee4-9b66-9fff84c7fa27"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Following is the A* Algorithm:\n",
            "Path found: ['A', 'E', 'D', 'G']\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['A', 'E', 'D', 'G']"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}